module dp_mod
	(
	input signed [15:0] id_data,	// S[16,15] 
	input [23:0] id_frec_por,		// U[24,24]
	input [15:0] id_im_am,			// U[16,15]
	input [15:0] id_im_fm,			// U[16,16]
	input ic_fm_am, 				// Control modo fm/am
	input ic_rst,					// rst sincrono activo a 1
	input ic_val_data,				
	input clk,
	output signed [15:0] od_data,	// S[16,15]
	output oc_val_data
	);

logic signed [15:0] id_data_r,	// S[16,15] 
logic [23:0] id_frec_por_r,		// U[24,24]
logic [15:0] id_im_am_r,		// U[16,15]
logic [15:0] id_im_fm_r,		// U[16,16]
logic ic_fm_am_r, 				// Control modo fm/am
logic ic_rst_r,					// rst sincrono activo a 1
logic ic_val_data_r,				
logic clk_r,
logic signed [15:0] od_data_r,
logic signed [15:0] od_data_s,	// S[16,15]
logic oc_val_data_r,	
logic val_out_s,val_out_r;
	
// Seleccion de registros de I/O: 0-->no, 1-->si 
parameter reg_io = 1;

// No registra I/O
generate if (reg_io == 0)
	always_comb 	
		begin
			id_data_r      <= id_data;
            id_frec_por_r  <= id_frec_por;
            id_im_am_r     <= id_im_am;
            id_im_fm_r     <= id_im_fm;
            ic_fm_am_r     <= ic_fm_am;
            ic_rst_r       <= ic_rst;
            ic_val_data_r  <= ic_val_data;
            od_data_r      <= od_data_s;
            val_out_r 	   <= val_out_s;
		end
else
	always_ff@(posedge clk) 	
		begin
			id_data_r      <= id_data;
            id_frec_por_r  <= id_frec_por;
            id_im_am_r     <= id_im_am;
            id_im_fm_r     <= id_im_fm;
            ic_fm_am_r     <= ic_fm_am;
            ic_rst_r       <= ic_rst;
            ic_val_data_r  <= ic_val_data;
            od_data_r      <= od_data_s;
            val_out_r      <= val_out_s;
		end
endgenerate
		

dp_mod DP1 (
		.id_data(id_data_r),
		.id_frec_por(id_frec_por_r),
		.id_im_am(id_im_am_r),
		.id_im_fm(id_im_fm_r),
		.ic_fm_am(ic_fm_am_r),
		.ic_rst(ic_rst_r),
		.ic_val_data(ic_val_data_r),
		.clk(clk),
		.od_data(od_data_s),
		.oc_val_data(val_out_s)
	);

assing od_data	   = od_data_r;
assign oc_val_data = val_out_r;

endmodule 